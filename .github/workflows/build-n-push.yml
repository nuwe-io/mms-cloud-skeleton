name: Build, Push & Deploy to GKE

on:
  push:
    branches:
      - main
      - stag
      - dev

env:
  GIT_BRANCH_TAG: ${{ github.ref == 'refs/heads/main' && 'latest' || github.ref == 'refs/heads/stag' && 'stag' || github.ref == 'refs/heads/dev' && 'dev' }}
  GKE_CLUSTER_NAME: ${{ github.event.repository.name }}-${{ github.ref == 'refs/heads/main' && 'prod' || github.ref == 'refs/heads/stag' && 'stag' || github.ref == 'refs/heads/dev' && 'dev' }}-cluster

jobs:
  build_and_push_docker_image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK as Docker's credential helper.
        env:
          GCP_ARTIFACT_REGISTRY_HOSTNAME: ${{ secrets.GCP_ARTIFACT_REGISTRY_HOSTNAME }}
        run: |
          gcloud auth configure-docker $GCP_ARTIFACT_REGISTRY_HOSTNAME --quiet

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          file: ./automation/docker/Dockerfile
          context: .
          push: true
          tags: |
            ${{ secrets.GCP_ARTIFACT_REGISTRY_HOSTNAME }}/${{ secrets.GCP_PROJECT_ID }}/${{ vars.GCP_ARTIFACT_REGISTRY_REPO_NAME }}/${{ github.event.repository.name }}:${{ github.sha }}
            ${{ secrets.GCP_ARTIFACT_REGISTRY_HOSTNAME }}/${{ secrets.GCP_PROJECT_ID }}/${{ vars.GCP_ARTIFACT_REGISTRY_REPO_NAME }}/${{ github.event.repository.name }}:${{ env.GIT_BRANCH_TAG }}

  deploy_to_gke:
    needs: build_and_push_docker_image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Initialize Terraform
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        run: |
          cd ./automation/terraform
          echo "$GCP_SA_KEY" > gcp_sa_key.json
          terraform init -backend-config="credentials=gcp_sa_key.json"

      - name: Validate Terraform
        run: |
          cd ./automation/terraform
          terraform validate

      - name: Plan Terraform changes
        env:
          TF_VAR_gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_gcp_region: ${{ vars.GCP_REGION }}
          TF_VAR_gcp_credentials: ${{ secrets.GCP_SA_KEY }}
          TF_VAR_gke_cluster_name: ${{ env.GKE_CLUSTER_NAME }}
          TF_LOG: DEBUG
        run: |
          cd ./automation/terraform
          terraform plan -out=tfplan

      - name: Apply Terraform changes
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        if: github.ref == 'refs/heads/main'
        run: |
          cd ./automation/terraform
          terraform apply -auto-approve -input=false tfplan

      - name: Authenticate and configure kubectl
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_REGION: ${{ vars.GCP_REGION }}
          GKE_CLUSTER_NAME: ${{ env.GKE_CLUSTER_NAME }}
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER_NAME --region $GCP_REGION --project $GCP_PROJECT_ID
          kubectl config use-context gke_$GCP_PROJECT_ID_$GCP_REGION_$GKE_CLUSTER_NAME

      - name: Set up Docker Compose variables
        env:
          IMAGE_NAME: ${{ secrets.GCP_ARTIFACT_REGISTRY_HOSTNAME }}/${{ secrets.GCP_PROJECT_ID }}/${{ github.event.repository.name }}:${{ github.sha }}
        run: |
          cd ./automation/docker
          envsubst < ./templates/docker-compose.yaml.tpl > ./docker-compose.yaml

      - name: Install Kompose
        run: |
          curl -L https://github.com/kubernetes/kompose/releases/download/v1.24.0/kompose-linux-amd64 -o kompose
          chmod +x kompose
          sudo mv ./kompose /usr/local/bin/kompose

      - name: Convert Docker Compose to Kubernetes manifests
        run: |
          cd ./automation/docker
          kompose convert -f ./docker-compose.yaml -o ./k8s-manifest.yml

      - name: Deploy Kubernetes service
        run: |
          cd ./automation/docker
          kubectl apply -f ./k8s-manifest.yaml
